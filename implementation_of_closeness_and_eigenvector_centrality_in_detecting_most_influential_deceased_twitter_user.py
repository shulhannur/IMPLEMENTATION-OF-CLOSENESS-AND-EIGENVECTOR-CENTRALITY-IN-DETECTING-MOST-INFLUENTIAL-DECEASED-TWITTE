# -*- coding: utf-8 -*-
"""IMPLEMENTATION OF CLOSENESS AND EIGENVECTOR CENTRALITY IN DETECTING MOST INFLUENTIAL DECEASED TWITTER USER

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjy-toNzx8nn2z0fjwcJeblykR278WrF
"""

# !pip3 install twint

!pip3 install --user --upgrade git+https://github.com/twintproject/twint.git@origin/master#egg=twint

import twint
import pandas as pd
import numpy as np
import nest_asyncio
import networkx as nx
import matplotlib as plt
nest_asyncio.apply()

c = twint.Config()

c.Search = "rip Prince Philip"
c.Limit = 5000
c.Store_csv = True
c.Output = "tweetx.csv"

twint.run.Search(c)

tweets=pd.read_csv("tweetx.csv")
tweets

tweets=tweets[tweets['reply_to'] !='[]']
tweets['reply_to']=tweets['reply_to'].str[1:]
a=(tweets.assign(list=tweets["reply_to"].str.split(", ")).explode("list"))

c=a[a.list.str.contains("'screen")]

c['list']=c['list'].str[17:]
c['list']=c['list'].str[:-1]
#print(c.head())
c.to_csv(r'artru.csv')

G=nx.from_pandas_edgelist(c,source='username', target='list', create_using=nx.DiGraph())
ec = nx.eigenvector_centrality(G, tol=1e-03)
cc = nx.closeness_centrality(G)
sc1 = sorted(ec.items(), key=lambda x: x[1], reverse=True)
sc2 = sorted(cc.items(), key=lambda x: x[1], reverse=True)

nx.draw_networkx(G, with_labels=False, node_size=100, arrowsize=5, alpha=0.3, width=0.3)

print("10 most influential users in Prince Philip's death are:\n\nEigenvector Centrality:\n")
sc1[:10]

print("Closeness Centrality:\n")
sc2[:10]